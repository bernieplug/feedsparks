<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs 
	title="__MSG_Feedsparks__"
	title_url="http://leancode.com/feedsparks/"
	directory_title="__MSG_DirectoryTitle__"
	description="__MSG_Description__"
	render_inline="optional"
	author="Bernie T."
	author_email="widgets@leancode.com"
	author_affiliation="Leancode Inc."
	author_location="Bellevue, WA"
	screenshot="http://feedsparks.googlecode.com/svn/trunk/screenshot.png"
	thumbnail="http://feedsparks.googlecode.com/svn/trunk/thumbnail.png"
	author_photo="http://feedsparks.googlecode.com/svn/trunk/author_photo.png"
	author_aboutme="Software developer and entrepreneur. Look me up to talk about your next project."
	author_quote="What goes up must come down (at least with my subscribers)"
	author_link="http://leancode.com/"
	height="150"
	scrolling = "true"
>
    <Locale messages="http://feedsparks.googlecode.com/svn/trunk/ALL_ALL.xml"/>
	<Locale lang="es" messages="http://feedsparks.googlecode.com/svn/trunk/es_ALL.xml"/>
	<Locale lang="pt-BR" messages="http://feedsparks.googlecode.com/svn/trunk/pt_br_ALL.xml"/>
	<Require feature="analytics"/>
	<Require feature="dynamic-height"/>
	<Require feature="minimessage" /> 
</ModulePrefs>
<UserPref name="feeds" display_name="__MSG_AddFeeds__" datatype="list" default_value="Leancodecom,Leancode|Techcrunch"></UserPref>
<UserPref name="days" display_name="__MSG_DaysOfHistory__" datatype="string" default_value="30"></UserPref>
<UserPref name="attribute" display_name="__MSG_Show__" default_value="circulation" datatype="enum" >
    <EnumValue value="circulation" />
    <EnumValue value="hits" />
    <EnumValue value="reach" />
</UserPref>
<UserPref name="nameLimit" display_name="__MSG_NumChars__" datatype="hidden" default_value="15"></UserPref>
<UserPref name="userid" display_name="__MSG_UserId__" datatype="string"></UserPref>
<UserPref name="password" display_name="__MSG_Password__" datatype="string"></UserPref>
<Content type="html">
<![CDATA[
  <div style="display:none;" id=hidden__MODULE_ID__></div>
  <div style="padding:7px; vertical-align:top; font-size:xx-small; font-family: sans-serif"
       id=t__MODULE_ID__>Loading ...</div>
  <script>
	
  // For each row of results, we have a separate array element
  // This allows each result to be returned asynchronously without synchronization problems
  var rows_html__MODULE_ID__ = new Array();
  var pending_requests = 0;
  var simpleEncoding = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

  function generateDateString__MODULE_ID__(delta) {
    var date = new Date();
    date.setDate(date.getDate()-delta);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var days = date.getDate();

    var str = year.toString() + '-';
    str += (month < 10) ? "0" + month : month;
    str += '-';
    str += (days < 10) ? "0" + days : days;
    return str;
  }

	function simpleEncode(values, minValue, maxValue) {
	
		var chartData = ['s:'];
		maxValue = maxValue - minValue;
		for (var i = 0; i < values.length; i++) {
			var currentValue = values[i] - minValue;
			if (!isNaN(currentValue) && currentValue >= 0) {
				chartData.push(simpleEncoding.charAt(Math.round((simpleEncoding.length-1) * currentValue / maxValue )));
				}
			else {
				chartData.push('_');
			}
		}
		return chartData.join('');
	}

	function getChartUrl(values, minValue, maxValue, min_index, max_index, last_index) {
		
		var chd = "&chd=" + simpleEncode(values, minValue, maxValue);
		var chs = "&chs=" + (last_index*2 + 2) + "x20";
		var chm = "&chm=s,ff0000,0," + min_index + ".0,4|s,00ff00,0," + max_index + ".0,4|s,0000ff,0," + (last_index-1) + ".0,4";
	
		var url = "http://chart.apis.google.com/chart?cht=lc&chco=666666&chls=1,1,0&chxt=r,x,y&chxs=0,ffffff,11,0,_|1,ffffff,1,0,_|2,ffffff,1,0,_&chxl=0:|i|1:||2:||" + chd + chs + chm;
		
		return _IG_GetImageUrl(url);
		//return url;
	}

	function fetchXMLCallback (response, row) {
	
		// decrement our pending requests counter 
		pending_requests = --pending_requests;
		
		var prefs = new _IG_Prefs(__MODULE_ID__);
		var feed_names = prefs.getArray("feeds");
		var feedname_array = feed_names[row].split(",");
		var feedname = _esc(feedname_array[0]);
		var displayname = (feedname_array.length > 1) ? _hesc(feedname_array[1]) : _hesc(feedname_array[0]);
		var attribute = prefs.getString("attribute");
		var nameLimit = prefs.getInt("nameLimit");
		
		if (response == null || typeof(response) != "object" || response.firstChild == null) {
			var message = new _IG_MiniMessage(__MODULE_ID__);
			message.createTimerMessage(feedname + ":" + "__MSG_FailedRequest__" + "__MSG_TryLater__",5);
			return;
		}
		
		var html = '';
		var nodeList = response.getElementsByTagName("entry");
		
		// we have to keep track of max/min for sparklines "limits" param
		// if we don't set it correctly, bitworking will X out graphs for data > 100
		var min_index = 0;
		var max_index = 0;
		var max = 0;
		var min = 999999999;
		var data = [];
		var data_csv = '';
		var datapoint = '0';
		var prevpoint = '0';
		var trend_image = _IG_GetImageUrl('http://feedsparks.googlecode.com/svn/trunk/back-forth.gif');
		
		// This is where we parse the statistics from the XML
		for (var k = 0; k <  nodeList.length; k++) {
			var node = nodeList.item(k);
			prevpoint = datapoint;
			datapoint = node.getAttribute(attribute);
			var x = parseInt(datapoint);
			if (x > max) { max = x; max_index = k};
			if (x < min) { min = x; min_index = k};
			data.push(x);
		}
		
		data_csv = data.join(",");

		if (parseInt(datapoint) < parseInt(prevpoint)) { trend_image = _IG_GetImageUrl('http://feedsparks.googlecode.com/svn/trunk/arrow-down.gif'); }
		else if (parseInt(datapoint) > parseInt(prevpoint)) { trend_image = _IG_GetImageUrl('http://feedsparks.googlecode.com/svn/trunk/arrow-up.gif'); }

		if (displayname.length > nameLimit ) { 
			displayname = displayname.substr(0,(nameLimit-3)) + "..."; 
		}
		var sparkline_image = getChartUrl(data, min, max, min_index, max_index, nodeList.length);

		rows_html__MODULE_ID__[row] = '<td><a target=_blank href=http://feeds.feedburner.com/' + feedname + ' title=' + feedname + ' ><font size=-1>' + displayname + ' </font></a></td><td><img src="' + sparkline_image + '" /></td><td>' + datapoint + '&nbsp;</td><td><img src=' + trend_image + ' /></td>';	
		
		// We've now iterated through all data entries of this one feedburner feed, and generated the HTML for it
		// only in IE, will get error assembling a table by setting innerHTML of table rows separately (known IE problem)
		// so we set the table all at once
		// We do this here, so HTML DOM is updated asynchronously once for each feed.  If we could do this 
		// in the feedchart function instead, the DOM would get updated only once, but you'd have to wait for all feeds to load
		html = '<table style=\"border:0; width=100%\" cellspacing=0 cellpadding=0 width=100%><tr>' + rows_html__MODULE_ID__.join('</tr><tr>') + '</tr></table>';
		_gel('t__MODULE_ID__').innerHTML = html;
		
		// Once all the FetchXmlContent calls return, resize gadget vertically
		if (pending_requests <= 0) {
			// Tells gadget to resize itself
			_IG_AdjustIFrameHeight();
		}
	}

  function feedchart__MODULE_ID__() {
    var prefs = new _IG_Prefs(__MODULE_ID__);

	// Get the array of Feedburner feed names entered by the user
	var feed_names = prefs.getArray("feeds");
	var delta = prefs.getInt("days");
	var userid = prefs.getString("userid");
	var password = prefs.getString("password");
	
	var date_range = generateDateString__MODULE_ID__(delta) + "," + generateDateString__MODULE_ID__(0);
	var url_pre = '';
	
	if ((userid.length > 0) && (password.length > 0)) {
		url_pre = "https://api.feedburner.com/awareness/1.0/GetFeedData?user=" + _esc(userid) + "&password=" + _esc(password) + "&uri=";
	} else {
		url_pre = "http://api.feedburner.com/awareness/1.0/GetFeedData?uri=";
	}
	
	pending_requests = feed_names.length;
	
	for (var row = 0; row < feed_names.length; row++) {
		var feedname_array = feed_names[row].split(",");
		var feedname = _esc(feedname_array[0]);
		
		var url = url_pre + feedname + "&dates=" + date_range;

		// The cached version fails for some reason
		//_IG_FetchXmlContent(_IG_GetCachedUrl(url), _IG_Callback(fetchXMLCallback, row));
		_IG_FetchXmlContent(url, _IG_Callback(fetchXMLCallback, row));
	}
  }
  _IG_RegisterOnloadHandler(feedchart__MODULE_ID__);
  _IG_Analytics("UA-99119-16", "/feedsparks");
  </script>
]]>
</Content>
</Module>

